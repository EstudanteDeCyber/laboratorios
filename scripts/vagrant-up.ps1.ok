param (
    [string]$VagrantArgs = "up" # COMANDO PADRAO E "VAGRANT UP"
)

# FUNCAO: DEFINE O VAGRANTFILE BASEADO NO PADRAO VAGRANTFILE_*
function Set-VagrantfileEnv {
    $Vagrantfile = Get-ChildItem -Path . -Filter "Vagrantfile_*" | Select-Object -First 1
    if ($null -eq $Vagrantfile) {
        Write-Host "‚ùå NENHUM VAGRANTFILE_* ENCONTRADO NO DIRETORIO ATUAL." -ForegroundColor Red
        exit 1
    }
    $env:VAGRANT_VAGRANTFILE = $Vagrantfile.Name
    Write-Host "‚úÖ VAGRANT_VAGRANTFILE DEFINIDO COMO: $($env:VAGRANT_VAGRANTFILE)"
}

# FUNCAO: EXECUTA O SCRIPT POS_INSTALL_<SUFIXO>.PS1 BASEADO NO VAGRANTFILE
function Run-PostInstallScript {
    if (-not $env:VAGRANT_VAGRANTFILE) {
        Write-Host "‚ùå VAGRANT_VAGRANTFILE NAO ESTA DEFINIDO." -ForegroundColor Red
        exit 1
    }

    if ($env:VAGRANT_VAGRANTFILE -match "^Vagrantfile_(.+)$") {
        $Suffix = $Matches[1]
        $ScriptName = "pos_install_${Suffix}.ps1"
        $ScriptPath = Join-Path -Path $RootScriptsPath -ChildPath $ScriptName

        Write-Host "EXECUTANDO $ScriptName..."

        if (-not (Test-Path $ScriptPath)) {
            Write-Host "‚ùå SCRIPT $ScriptName NAO ENCONTRADO EM $ScriptPath." -ForegroundColor Red
            exit 1
        }

        powershell -NoProfile -ExecutionPolicy Bypass -File $ScriptPath

        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå ERRO AO EXECUTAR $ScriptName." -ForegroundColor Red
            exit $LASTEXITCODE
        }

        Write-Host "‚úÖ $ScriptName EXECUTADO COM SUCESSO." -ForegroundColor Green
    } else {
        Write-Host "‚ùå NOME DO VAGRANTFILE NAO SEGUE O PADRAO ESPERADO." -ForegroundColor Red
        exit 1
    }
}

# PEGA A PASTA ATUAL ONDE O COMANDO ESTA SENDO EXECUTADO
$ProjectPath = (Get-Location).Path

# DEFINE A RAIZ ONDE OS SCRIPTS ESTAO (SEMPRE "laboratorios\scripts")
$RootScriptsPath = Join-Path -Path (Split-Path $ProjectPath -Parent) -ChildPath "scripts"

# VALIDA SE A PASTA DE SCRIPTS EXISTE
if (-not (Test-Path $RootScriptsPath)) {
    Write-Host "‚ùå DIRETORIO DE SCRIPTS NAO ENCONTRADO: $RootScriptsPath" -ForegroundColor Red
    exit 1
}

# ‚öôÔ∏è DEFINE O VAGRANTFILE AUTOMATICAMENTE
Set-VagrantfileEnv

# GARANTE QUE O VAGRANT USE O CATALOGO GLOBAL DE BOXES
$env:VAGRANT_HOME = "D:\VMs\VirtualBox\Boxes"

# SALVA O MACHINEFOLDER ATUAL DO VIRTUALBOX (APENAS PARA EXIBICAO)
$OriginalMachineFolder = (& VBoxManage list systemproperties | Select-String "Default machine folder").ToString().Split(":", 2)[1].Trim()
Write-Host "MACHINE FOLDER ATUAL: $OriginalMachineFolder"
Write-Host "DEFININDO MACHINEFOLDER TEMPORARIO PARA: $ProjectPath"

# SETA O MACHINEFOLDER PARA A PASTA ATUAL
VBoxManage setproperty machinefolder "$ProjectPath"

# VAI ATE A PASTA ATUAL
Push-Location $ProjectPath

# PREPARA OS ARGUMENTOS COMO ARRAY (SPLIT POR ESPACO)
$ArgList = $VagrantArgs.Split(" ")

# EXECUTA O VAGRANT COM OS ARGUMENTOS RECEBIDOS
Write-Host "RODANDO: vagrant $VagrantArgs"
& vagrant @ArgList

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå ERRO AO EXECUTAR 'vagrant $VagrantArgs'. VERIFIQUE OS LOGS PARA DETALHES."
    Pop-Location
    # DEFINE O MACHINEFOLDER PARA D:\VMs\VirtualBox EM CASO DE ERRO
    Write-Host "RESTAURANDO MACHINEFOLDER PARA: D:\VMs\VirtualBox"
    VBoxManage setproperty machinefolder "D:\VMs\VirtualBox"
    exit $LASTEXITCODE
}

# üîÅ EXECUTA O POS_INSTALL CORRETO SE COMANDO FOR "UP" OU VAZIO
if ($VagrantArgs -eq "up" -or $VagrantArgs -eq "") {
    Run-PostInstallScript
} else {
    Write-Host "‚ÑπÔ∏è PULANDO EXECUCAO DE pos_install.ps1, POIS O COMANDO NAO E 'UP'."
}

# VOLTA PARA A PASTA ORIGINAL
Pop-Location

# DEFINE O MACHINEFOLDER PARA D:\VMs\VirtualBox
Write-Host "RESTAURANDO MACHINEFOLDER PARA: D:\VMs\VirtualBox"
VBoxManage setproperty machinefolder "D:\VMs\VirtualBox"