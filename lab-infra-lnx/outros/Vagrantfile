Vagrant.configure("2") do |config|
  # Desativa sincronização da pasta /vagrant para todas as VMs
  config.vm.synced_folder ".", "/vagrant", disabled: true
  
  #Função que cria o user hugom e ajusta senha, copia a chave do host para o firewall,
  # ajusta senha do root e ajusta profile.

  define_method(:add_hugom_user) do |node|
    node.vm.provision "file", source: "D:/VMs/VirtualBox/InfraOpen/configurar-syslog-chrony.sh", destination: "/tmp/configurar-syslog-chrony.sh"
    node.vm.provision "shell", inline: <<-SHELL
	  if ! id -u hugom >/dev/null 2>&1; then
        useradd -m -s /bin/bash hugom
        echo "hugom:change-me" | chpasswd
        usermod -aG sudo hugom || true
		echo "root:p@ssw0rd" | chpasswd
        cp /etc/skel/.bashrc /home/hugom/
        cp /etc/skel/.profile /home/hugom/ || true
        chown hugom:hugom /home/hugom/.bashrc /home/hugom/.profile || true
      fi

  # Ajuste timezone
	  timedatectl set-timezone America/Sao_Paulo
  
  # Update da maquina virtual
	  apt update && NEEDRESTART_MODE=a apt -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" upgrade
	  
  # Configura syslog e ntp
	  mv /tmp/configurar-syslog-chrony.sh /home/hugom/configurar-syslog-chrony.sh
	  chmod 700 /home/hugom/configurar-syslog-chrony.sh
	  chmod 700 /home/hugom/configurar-syslog-chrony.sh
	  bash /home/hugom/configurar-syslog-chrony.sh || echo "Falha no Script"
  
   # Ajuste de Teclado - Apenas se for Debian
		export DEBIAN_FRONTEND=noninteractive
		echo 'keyboard-configuration keyboard-configuration/layoutcode select br' | debconf-set-selections
		echo 'keyboard-configuration keyboard-configuration/modelcode select abnt2' | debconf-set-selections
		echo 'keyboard-configuration keyboard-configuration/variantcode select' | debconf-set-selections
		NEEDRESTART_MODE=a apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" install keyboard-configuration console-setup console-data
		dpkg-reconfigure -f noninteractive keyboard-configuration
		setupcon --force
		loadkeys br-abnt2 || loadkeys br || echo " Layout de teclado não encontrado"

	SHELL
  end

  # VM firewall
  config.vm.define "firewall" do |node|
    node.vm.box = "debian/bookworm64"
    node.vm.hostname = "firewall"

    node.vm.network "private_network",
      type: "dhcp", virtualbox__intnet: "infraopen_network", mac: "080027AA0001"

    node.vm.network "private_network",
      type: "dhcp", virtualbox__hostonly_adapter: "VirtualBox Host-Only Ethernet Adapter", mac: "080027AA0002"

    node.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.cpus = 2
      vb.name = "firewall"
      vb.customize ["modifyvm", :id, "--usb", "off"]
      vb.customize ["modifyvm", :id, "--audio", "none"]
    end

    add_hugom_user(node)

    node.vm.synced_folder "C:/Users/hugom/.ssh", "/tmp_key"
    node.vm.synced_folder "D:/VMs/VirtualBox/InfraOpen", "/tmp_scripts"

    node.vm.provision "shell", inline: <<-SHELL
	  # Cria diretório .ssh se não existir
	  mkdir -p /home/hugom/.ssh
	  chown hugom:hugom /home/hugom/.ssh
	  chmod 700 /home/hugom/.ssh
	  
	  # Gera chave apenas se não existir
	  if [ ! -f /home/hugom/.ssh/id_rsa ]; then
	  sudo -u hugom ssh-keygen -t rsa -b 4096 -f /home/hugom/.ssh/id_rsa -N "" -q
	  fi
	  
	  # Copia chave pública da máquina host para authorized_keys
	  if [ -f /tmp_key/id_rsa.pub ]; then
	  cat /tmp_key/id_rsa.pub > /home/hugom/.ssh/authorized_keys
	  chown hugom:hugom /home/hugom/.ssh/authorized_keys
	  chmod 600 /home/hugom/.ssh/authorized_keys
	  else
	  echo "Chave pública /tmp_key/id_rsa.pub não encontrada!"
	  fi
	  
	  # Copia scripts e configurações
	  cp /tmp_scripts/instalar-firewall.sh /etc/firewall.sh
	  cp /tmp_scripts/firewall.service /etc/systemd/system/firewall.service
	  chmod 700 /etc/firewall.sh

      echo "Configurando rede no firewall..."

      cp /etc/network/interfaces /etc/network/interfaces.bak || true
      cat > /etc/network/interfaces <<EOF
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address 10.0.2.15
    netmask 255.255.255.0
    gateway 10.0.2.2
	dns-nameservers 10.0.2.3 

auto eth1
iface eth1 inet static
    address 192.168.100.254
    netmask 255.255.255.0
	dns-nameservers 10.0.2.3 192.168.100.1 192.168.100.2
	search infraopen.com

	
auto eth2
iface eth2 inet static
    address 192.168.56.10
    netmask 255.255.255.0
EOF

	  cat > /etc/resolv.conf << LOL
search infraopen.com
nameserver 192.168.100.1
nameserver 192.168.100.2
LOL
	  
#      IFACE=$(ip route | grep default | awk '{print $5}')
#      echo "post-up ip route add default via 10.0.2.2 dev $IFACE" > /etc/network/interfaces.d/default-gw

      echo "Desligando a VM firewall para ajustes manuais..."
	  cp /home/hugom/.ssh/id_rsa.pub /tmp_scripts/firewall_id_rsa.pub
      systemctl enable firewall.service
	  chmod 700 /home/hugom/configurar-syslog-chrony.sh

	poweroff
	SHELL
  end

  # VM dns1
  config.vm.define "dns1" do |node|
    node.vm.box = "debian/bookworm64"
    node.vm.hostname = "dns1"
    node.vm.network "private_network",
      ip: "192.168.100.1", virtualbox__intnet: "infraopen_network", mac: "080027BB0001"

    node.vm.provider "virtualbox" do |vb|
      vb.memory = 1024
      vb.cpus = 1
      vb.name = "dns1"
      vb.customize ["modifyvm", :id, "--usb", "off"]
      vb.customize ["modifyvm", :id, "--audio", "none"]
    end

    add_hugom_user(node)
	
	node.vm.synced_folder "D:/VMs/VirtualBox/InfraOpen", "/tmp_scripts"
    
	node.vm.provision "shell", inline: <<-SHELL
      echo "Configurando rede no dns1..."
      cp /etc/network/interfaces /etc/network/interfaces.bak || true
cat > /etc/network/interfaces <<EOF
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address 192.168.100.1
    netmask 255.255.255.0
    gateway 192.168.100.254
    dns-nameservers 192.168.100.1 192.168.100.2
    search infraopen.com
EOF
	  
	# Copia scripts e configurações
	cp /tmp_scripts/instalar-dhcp-dns-master.sh /home/hugom/instalar-dhcp-dns-master.sh
	chmod 700 /home/hugom/instalar-dhcp-dns-master.sh
	
	# Cria diretório .ssh se não existir
	mkdir -p /home/hugom/.ssh
	chown hugom:hugom /home/hugom/.ssh
	chmod 700 /home/hugom/.ssh

	# Adiciona chave pública do firewall
	if [ -f /tmp_scripts/firewall_id_rsa.pub ]; then
      cat /tmp_scripts/firewall_id_rsa.pub >> /home/hugom/.ssh/authorized_keys
      chown hugom:hugom /home/hugom/.ssh/authorized_keys
      chmod 600 /home/hugom/.ssh/authorized_keys
	else
	echo " firewall_id_rsa.pub não encontrado!"
	fi

	bash /home/hugom/instalar-dhcp-dns-master.sh || echo "Falha no Script"
	
    echo "Desligando a VM dns1 para ajustes manuais..."
    
	poweroff
    SHELL
  end

  # VM dns2
  config.vm.define "dns2" do |node|
    node.vm.box = "debian/bookworm64"
    node.vm.hostname = "dns2" 
	node.vm.network "private_network", ip: "192.168.100.2", virtualbox__intnet: "infraopen_network", mac: "080027BB0002"

    node.vm.provider "virtualbox" do |vb|
      vb.memory = 1024
      vb.cpus = 1
      vb.name = "dns2"
      vb.customize ["modifyvm", :id, "--usb", "off"]
      vb.customize ["modifyvm", :id, "--audio", "none"]
    end

    add_hugom_user(node)
	
	node.vm.synced_folder "D:/VMs/VirtualBox/InfraOpen", "/tmp_scripts"

    node.vm.provision "shell", inline: <<-SHELL
      echo "Configurando rede no dns2..."
      cp /etc/network/interfaces /etc/network/interfaces.bak || true
cat > /etc/network/interfaces <<EOF
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address 192.168.100.2
    netmask 255.255.255.0
    gateway 192.168.100.254
    dns-nameservers 192.168.100.1 192.168.100.2
    search infraopen.com
EOF
	  
	# Copia scripts e configurações
	cp /tmp_scripts/instalar-dns-slave.sh /home/hugom/instalar-dns-slave.sh
	chmod 700 /home/hugom/instalar-dns-slave.sh

	# Cria diretório .ssh se não existir
	mkdir -p /home/hugom/.ssh
	chown hugom:hugom /home/hugom/.ssh
	chmod 700 /home/hugom/.ssh

	# Adiciona chave pública do firewall
	if [ -f /tmp_scripts/firewall_id_rsa.pub ]; then
      cat /tmp_scripts/firewall_id_rsa.pub >> /home/hugom/.ssh/authorized_keys
      chown hugom:hugom /home/hugom/.ssh/authorized_keys
      chmod 600 /home/hugom/.ssh/authorized_keys
	else
	echo " firewall_id_rsa.pub não encontrado!"
	fi
	
	bash /home/hugom/instalar-dns-slave.sh  || echo "Falha no Script"

    echo "Desligando a VM dns2 para ajustes manuais..."
	
	poweroff
    SHELL
  end

  # Outras VMs (bacula-server, webmin-server) e clusters seguem padrão DHCP e desliga ao final
  vm_configs = [
    { name: "samba1",  box: "debian/bookworm64", mac: "080027BB0003" },
	{ name: "webserver",  box: "debian/bookworm64", mac: "080027BB0004" },
	{ name: "syslog",  box: "debian/bookworm64", mac: "080027BB0005" },
	{ name: "sftp",  box: "debian/bookworm64", mac: "080027BB0006" },
	{ name: "ntp",  box: "debian/bookworm64", mac: "080027BB0007" },
#   { name: "webmin",  box: "debian/bookworm64", mac: "080027BB0008" },
	{ name: "ubuntu-desk",  box: "gusztavvargadr/ubuntu-desktop", mac: "080027BB0009" }
  ]

  vm_configs.each do |vm|
    config.vm.define vm[:name] do |node|
      node.vm.box = vm[:box]
      node.vm.hostname = vm[:name]
      node.vm.network "private_network",
        type: "dhcp",
        virtualbox__intnet: "infraopen_network",
        mac: vm[:mac]

      node.vm.provider "virtualbox" do |vb|
        vb.memory = 1024
        vb.cpus = 1
        vb.name = vm[:name]
        vb.customize ["modifyvm", :id, "--usb", "off"]
        vb.customize ["modifyvm", :id, "--audio", "none"]
      end

      add_hugom_user(node)
	  
	  node.vm.synced_folder "D:/VMs/VirtualBox/InfraOpen", "/tmp_scripts"
      
	  node.vm.provision "shell", inline: <<-SHELL
	  
	  # Cria diretório .ssh se não existir
	mkdir -p /home/hugom/.ssh
	chown hugom:hugom /home/hugom/.ssh
	chmod 700 /home/hugom/.ssh

	  # Adiciona chave pública do firewall
	if [ -f /tmp_scripts/firewall_id_rsa.pub ]; then
      cat /tmp_scripts/firewall_id_rsa.pub >> /home/hugom/.ssh/authorized_keys
      chown hugom:hugom /home/hugom/.ssh/authorized_keys
      chmod 600 /home/hugom/.ssh/authorized_keys
	else
	echo " firewall_id_rsa.pub não encontrado!"
	fi
	  case "#{vm[:name]}" in
    "samba1")
      cp /tmp_scripts/instalar-samba.sh /home/hugom/
      chmod +x /home/hugom/instalar-samba.sh
      bash /home/hugom/instalar-samba.sh  || echo "Falha no Script"
      ;;
   "webserver")
     cp /tmp_scripts/instalar-lamp.sh /home/hugom/
     chmod +x /home/hugom/instalar-lamp.sh
     bash /home/hugom/instalar-lamp.sh  || echo "Falha no Script"
     ;;
   "syslog")
     cp /tmp_scripts/instalar-syslog.sh /home/hugom/
     chmod +x /home/hugom/instalar-syslog.sh
     bash /home/hugom/instalar-syslog.sh  || echo "Falha no Script"
     ;;
   "sftp")
     cp /tmp_scripts/instalar-sftp.sh /home/hugom/
     chmod +x /home/hugom/instalar-sftp.sh
     bash /home/hugom/instalar-sftp.sh  || echo "Falha no Script"
     ;;
   "ntp")
    cp /tmp_scripts/instalar-ntp.sh /home/hugom/
    chmod +x /home/hugom/instalar-ntp.sh
    bash /home/hugom/instalar-ntp.sh  || echo "Falha no Script"
    ;; 
#   "webmin")
#     cp /tmp_scripts/instalar-webmin.sh /home/hugom/
#     chmod +x /home/hugom/instalar-webmin.sh
#     bash /home/hugom/instalar-webmin.sh  || echo "Falha no Script"
#     ;;
   "ubuntu-desk")
    echo "OK"  || echo "Falha no Script"
    ;; 
  esac
	  
    echo "Desligando a VM #{vm[:name]} para ajustes manuais..."
    
	poweroff
    SHELL
    end
  end

  # Clusters Debian com IP fixo via DHCP
  3.times do |i|
    mac = format("080027DD%04d", i + 1)
    config.vm.define "debian-n#{i+1}" do |node|
      node.vm.box = "debian/bookworm64"
      node.vm.hostname = "debian-n#{i+1}"
      node.vm.network "private_network",
        type: "dhcp",
        virtualbox__intnet: "infraopen_network",
        mac: mac

      node.vm.provider "virtualbox" do |vb|
        vb.memory = 1024
        vb.cpus = 1
        vb.name = "debian-n#{i+1}"
        vb.customize ["modifyvm", :id, "--usb", "off"]
        vb.customize ["modifyvm", :id, "--audio", "none"]
      end

      add_hugom_user(node)
	  
	  node.vm.synced_folder "D:/VMs/VirtualBox/InfraOpen", "/tmp_scripts"

      node.vm.provision "shell", inline: <<-SHELL
	  
	  	  # Cria diretório .ssh se não existir
	mkdir -p /home/hugom/.ssh
	chown hugom:hugom /home/hugom/.ssh
	chmod 700 /home/hugom/.ssh

	  # Adiciona chave pública do firewall
	if [ -f /tmp_scripts/firewall_id_rsa.pub ]; then
      cat /tmp_scripts/firewall_id_rsa.pub >> /home/hugom/.ssh/authorized_keys
      chown hugom:hugom /home/hugom/.ssh/authorized_keys
      chmod 600 /home/hugom/.ssh/authorized_keys
	else
	echo " firewall_id_rsa.pub não encontrado!"
	fi
	
    echo "Desligando a VM debian-n#{i+1} para ajustes manuais..."
    
	poweroff
    SHELL
    end
  end

    config.vm.define "windows10" do |windows10|
    # Base configuration for the VM and provisioner
    windows10.vm.box = "gusztavvargadr/windows-10"
    windows10.vm.hostname = "windows10"
    windows10.vm.communicator = "winrm"
    windows10.winrm.retry_limit = 60
    windows10.winrm.retry_delay = 10

    windows10.vm.network "private_network", ip: "10.10.10.12" , netmask: "255.255.255.0", virtualbox__intnet: "EngRev_Malware_VulnLab"

    windows10.vm.provider "virtualbox" do |v|
	  v.name = "windows10"

    end

	# Shutdown the VM after provisioning
	
	windows10.vm.provision "shell", inline: <<-POWERSHELL
    $password = ConvertTo-SecureString "change-me" -AsPlainText -Force
    New-LocalUser -Name "hugom" -Password $password -FullName "Hugo M" -Description "Usuário Hugo" -PasswordNeverExpires
    Add-LocalGroupMember -Group "Administrators" -Member "hugom"
    
    netsh advfirewall firewall add rule name="Allow ICMPv4-In" protocol=icmpv4 dir=in action=allow
    netsh advfirewall firewall add rule name="Allow ICMPv4-Out" protocol=icmpv4 dir=out action=allow
    
    Set-ItemProperty -Path "HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server" -Name "fDenyTSConnections" -Value 0
    Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
    Add-LocalGroupMember -Group "Remote Desktop Users" -Member "hugom"
    
POWERSHELL

  end
end